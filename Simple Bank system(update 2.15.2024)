#include <iostream>
#include <vector>
#include <string>
#include <ctime>

class Transaction {
public:
    std::string type;
    double amount;
    Transaction(std::string t, double a) : type(t), amount(a) {}
};

class Account {
private:
    double balance;
    std::vector<Transaction> transactions;
public:
    Account(double initialBalance) : balance(initialBalance) {}
    double getBalance() { return balance; }
    void deposit(double amount) {
        balance += amount;
        transactions.push_back(Transaction("Deposit", amount));
    }
    void withdraw(double amount) {
        if (balance >= amount) {
            balance -= amount;
            transactions.push_back(Transaction("Withdrawal", amount));
            std::cout << "Withdrawal successful!" << std::endl;
        } else {
            std::cout << "Insufficient funds!" << std::endl;
        }
    }
    void sendMoney(double amount, std::string receiverDetails) {
        if (balance >= amount) {
            balance -= amount;
            transactions.push_back(Transaction("Sent", amount));
            std::cout << "Money sent successfully to " << receiverDetails << "!" << std::endl;
        } else {
            std::cout << "Insufficient funds!" << std::endl;
        }
    }
};

class Bank {
private:
    std::vector<Account> accounts;
public:
    void addAccount(double initialBalance) {
        accounts.push_back(Account(initialBalance));
    }
    void removeAccount(int index) {
        accounts.erase(accounts.begin() + index);
    }
    std::vector<Account>& getAccounts() {
        return accounts;
    }
    double calculateYearlyInterest(double amount, int months) {
        return (amount * 0.09); // Fixed yearly interest rate of 9%
    }
};

int getDaysSinceBirthday(int birthDay, int birthMonth, int birthYear) {
    std::time_t now = std::time(nullptr);
    std::tm* localTime = std::localtime(&now);
    int currentYear = localTime->tm_year + 1900;
    int currentMonth = localTime->tm_mon + 1;
    int currentDay = localTime->tm_mday;

    int daysSinceBirthday = 0;
    if (currentYear > birthYear) {
        daysSinceBirthday += (365 - (birthDay + (30 * (birthMonth - 1))));

        for (int i = birthYear + 1; i < currentYear; ++i) {
            daysSinceBirthday += (i % 4 == 0 && (i % 100 != 0 || i % 400 == 0)) ? 366 : 365;
        }

        for (int i = 1; i < currentMonth; ++i) {
            daysSinceBirthday += (i == 2 && (currentYear % 4 == 0 && (currentYear % 100 != 0 || currentYear % 400 == 0))) ? 29 : (i == 2 ? 28 : ((i % 2 == 0 && i < 8) || (i % 2 != 0 && i >= 8)) ? 30 : 31);
        }

        daysSinceBirthday += currentDay;
    }
    return daysSinceBirthday;
}

int main() {
    int birthDay, birthMonth, birthYear;
    std::cout << "Enter your birth date (DD MM YYYY): ";
    std::cin >> birthDay >> birthMonth >> birthYear;
    int daysSinceBirthday = getDaysSinceBirthday(birthDay, birthMonth, birthYear);
    double initialBalance = daysSinceBirthday;
    std::cout << "Initial balance based on days since birthday: " << initialBalance << " USD" << std::endl;

    Bank bank;
    bank.addAccount(initialBalance);
    Account& account1 = bank.getAccounts().front();
    int choice;
    double amount;
    std::string receiverDetails;
    
    while (true) {
        std::cout << "Current Balance: " << account1.getBalance() << " USD" << std::endl;
        std::cout << "\n1. Withdraw Money\n2. Send Money\n3. Request Money\n4. Save for Yearly Interest Rate\n5. Exit\n";
        std::cout << "Enter your choice: ";
        std::cin >> choice;
        switch (choice) {
            case 1:
                std::cout << "Enter amount to withdraw: ";
                std::cin >> amount;
                account1.withdraw(amount);
                break;
            case 2:
                std::cout << "Enter amount to send: ";
                std::cin >> amount;
                std::cout << "Enter receiver details: ";
                std::cin.ignore();
                std::getline(std::cin, receiverDetails);
                account1.sendMoney(amount, receiverDetails);
                break;
            case 3:
                std::cout << "From which user do you want to request money? ";
                std::cout << "We'll email to the user you provide regarding your payment request." << std::endl;
                break;
            case 4:
                double savingAmount;
                std::cout << "Enter amount to save for yearly interest: ";
                std::cin >> savingAmount;
                std::cout << "The amount you entered for yearly interest rate: " << savingAmount << std::endl;
                std::cout << "The yearly interest rate is fixed and it is 9% for now." << std::endl;
                std::cout << "Do you want to proceed? (1) Yes (2) No, change the amount (3) Cancel the process: ";
                int proceedChoice;
                std::cin >> proceedChoice;
                switch (proceedChoice) {
                    case 1:
                        if (account1.getBalance() >= savingAmount) {
                            account1.withdraw(savingAmount);
                            std::cout << "Saved " << savingAmount << " for yearly interest!" << std::endl;
                        } else {
                            std::cout << "Insufficient funds to save for yearly interest!" << std::endl;
                        }
                        break;
                    case 2:
                        std::cout << "Enter the new amount to save for yearly interest: ";
                        std::cin >> savingAmount;
                        break;
                    case 3:
                        std::cout << "Cancelled the process." << std::endl;
                        break;
                    default:
                        std::cout << "Invalid choice. Please try again." << std::endl;
                        break;
                }
                break;
            case 5:
                std::cout << "Exiting program..." << std::endl;
                return 0;
            default:
                std::cout << "Invalid choice. Please try again." << std::endl;
        }
    }
}
